package org.globsframework.core.utils.serialization;

import org.junit.jupiter.api.Test;

import java.nio.ByteBuffer;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

/*
generated by IA
 */

public class NByteBufferSerializationInputTest {

    private static ByteBuffer buildBuffer(java.util.function.Consumer<ByteBufferSerializationOutput> writer) {
        byte[] buffer = new byte[4096];
        ByteBufferSerializationOutput out = new ByteBufferSerializationOutput(buffer);
        writer.accept(out);
        int size = out.position();
        return ByteBuffer.wrap(buffer, 0, size);
    }

    private static NByteBufferSerializationInput buildInput(ByteBuffer byteBuffer) {
        return new NByteBufferSerializationInput(byteBuffer, data -> ByteBuffer.wrap(new byte[0]));
    }

    @Test
    public void testPrimitiveReads() {
        ByteBuffer buf = buildBuffer(out -> {
            out.write(123456789);
            out.writeInteger(null);
            out.writeInteger(42);
            out.write(987654321L);
            out.writeLong(null);
            out.writeLong(1234567890123456789L);
            out.write(3.141592653589793);
            out.writeDouble(null);
            out.writeDouble(2.718281828459045);
            out.write(true);
            out.writeBoolean(null);
            out.writeBoolean(false);
            out.writeByte((byte) 0x7F);
        });

        NByteBufferSerializationInput in = buildInput(buf);

        assertEquals(123456789, in.readNotNullInt());
        assertNull(in.readInteger());
        assertEquals(42, in.readInteger());

        assertEquals(987654321L, in.readNotNullLong());
        assertNull(in.readLong());
        assertEquals(1234567890123456789L, in.readLong());

        assertEquals(3.141592653589793, in.readNotNullDouble(), 0.0);
        assertNull(in.readDouble());
        assertEquals(2.718281828459045, in.readDouble(), 0.0);

        assertEquals(Boolean.TRUE, in.readBoolean());
        assertNull(in.readBoolean());
        assertEquals(Boolean.FALSE, in.readBoolean());

        assertEquals((byte)0x7F, in.readByte());
    }

    @Test
    public void testArrayReadsAndBytes() {
        int[] ints = {1, -2, 3, Integer.MIN_VALUE, Integer.MAX_VALUE};
        long[] longs = {0L, -1L, 1L, Long.MIN_VALUE, Long.MAX_VALUE};
        double[] doubles = {0.0, -0.0, 1.5, Double.MIN_VALUE, Double.MAX_VALUE};
        boolean[] bools = {true, false, true, true, false};
        byte[] bytes = new byte[256];
        for (int i = 0; i < bytes.length; i++) bytes[i] = (byte) i;

        ByteBuffer buf = buildBuffer(out -> {
            out.write(ints);
            out.write(longs);
            out.write(doubles);
            out.write(bools);
            out.writeBytes(bytes);

            out.write((int[]) null);
            out.write((long[]) null);
            out.write((double[]) null);
            out.write((boolean[]) null);
            out.writeBytes(null);
        });

        NByteBufferSerializationInput in = buildInput(buf);

        assertArrayEquals(ints, in.readIntArray());
        assertArrayEquals(longs, in.readLongArray());
        assertArrayEquals(doubles, in.readDoubleArray());
        assertArrayEquals(bools, in.readBooleanArray());
        assertArrayEquals(bytes, in.readBytes());

        assertNull(in.readIntArray());
        assertNull(in.readLongArray());
        assertNull(in.readDoubleArray());
        assertNull(in.readBooleanArray());
        assertNull(in.readBytes());
    }

    @Test
    public void testEmptyArraysAndBytes() {
        int[] ints = new int[0];
        long[] longs = new long[0];
        double[] doubles = new double[0];
        boolean[] bools = new boolean[0];
        byte[] bytes = new byte[0];

        ByteBuffer buf = buildBuffer(out -> {
            out.write(ints);
            out.write(longs);
            out.write(doubles);
            out.write(bools);
            out.writeBytes(bytes);
        });

        NByteBufferSerializationInput in = buildInput(buf);

        assertArrayEquals(ints, in.readIntArray());
        assertArrayEquals(longs, in.readLongArray());
        assertArrayEquals(doubles, in.readDoubleArray());
        assertArrayEquals(bools, in.readBooleanArray());
        assertArrayEquals(bytes, in.readBytes());
    }
}
